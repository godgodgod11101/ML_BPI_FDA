---
title: "BPI Model Improvement"
author: "Jacky Wang"
format:
    html:
        theme: cosmo
        toc: true
        toc-depth: 2
        toc-location: right
        toc-title: "On this page"
        css: "css/style.css"
        df-print: paged
---



## Code Structure

1. **資料整理**
2. [資料不平衡處理](https://godgodgod11101.github.io/ML_BPI_FDA/vegetable/HandleImbData.html)
3. [模型配適](https://godgodgod11101.github.io/ML_BPI_FDA/vegetable/ModelFitting.html)
4. [模型評估](https://godgodgod11101.github.io/ML_BPI_FDA/vegetable/ModelEvaluating.html)



## Introduction

本程式檔執行內容如下：

1. Import：引入資料，資料來源為BPI資料庫，擷取特徵篩選後的資料，維持相同之資料前處理流程。
2. Tidy & Transform：資料清理與轉換，方便後續使用 [tidymodels]{.obj} 建模。
3. Split：切分訓練集與測試集，存成 [.rda]{.obj} ，供後續建模使用。



## Package

引入所需套件
```{r}
#| message: false
#| warning: false

# tidyverse
library(tibble)
library(dplyr)
library(stringr)
library(purrr)    # FP toolkit, use map(), modify() instead of for-loop
library(tidyr)    # handle missing values

```



## Import Data

引入資料
```{r}
load(file = "data/vegetable_ori.rda")
```

```{r}
#| echo: false
cat("資料維度：", dim(tbl_ori)[[1]], "obs. of", dim(tbl_ori)[[2]], "variables")
```

顯示部分資料內容
```{r}
#| echo: false
tbl_ori[c(1:4, 15)] %>% 
    mutate(
        簽審核准許可文件編號 = {str_sub(簽審核准許可文件編號, end = 6L) %>% str_c("...")}, 
        受理日期 = {str_sub(受理日期, end = 5L) %>% str_c("...")}
    ) %>% 
    head(n = 5L)
```



## Tidy & Transform

將原始資料進行清理與型別轉換，方便後續使用 [tidymodels]{.obj} 建模。

### others

將非用於建模之報單額外資訊另存於 [tbl_others]{.obj} 資料表
```{r}
tbl_others <- tbl_ori %>% 
    select(簽審核准許可文件編號, 報單項次, 受理日期)
```

檢視有無 [缺失值]{.hl}
```{r}
tbl_others %>% 
    summarise(
        .data = ., 
        across(    # 套用至多個欄位
            .cols = everything(),    # tidy-select
            .fns = list(n_na = ~ sum(is.na(.x))),    # purrr-style lambda
            .names = "{.fn}({.col})"
        )
  )
```

檢視有無 [重複值]{.hl}
```{r}
tbl_others %>% 
    summarise(., n_unique = n_distinct(簽審核准許可文件編號))
```

檢視有無 [不符規則的格式]{.hl}
```{r}
#   簽審編號
pat_sn <- "IF[A-Z]0[0-9][A-Z0-9]{2}[0-9]{7}"    # length 1 atomic vector
tbl_others %>% 
    summarise(., n_abnormal = sum(!str_detect(簽審核准許可文件編號, pat_sn)))

#   日期
n_abn <- tbl_ori$受理日期 %>% as.Date() %>% is.na() %>% sum()
tibble(n_abnormal = n_abn)
```

```{r}
#| echo: false
rm(pat_sn, n_abn)
```

將欄位 [受理日期]{.obj} 轉換成 [date]{.obj} 型別，後續用於切分訓練集與測試集資料
```{r}
tbl_others <- tbl_others %>% 
    mutate(受理日期 = as.Date(受理日期))
```

### main

#### handle target (!顯示處理結果)

1. 目標變數轉換成 [factor]{.obj} 型別，同時[去掉中文類別名稱]{.hl}
2. [預測目標放第一個位置]{.hl}（配合 [tidymodels]{.obj} ）
```{r}

# target
y <- tbl_ori$`批檢驗結果(除去標示因素)` %>% 
    factor(., 
        levels = c("不合格", "合格"),    # 將預測目標放前，配合parsnip
        labels = c("Fail", "Pass")
    )

# y %>% summary()
```

#### handle features

1. 特徵轉換成 [factor]{.obj} 型別（BPI模型資料皆為類別變數），同[時去掉中文類別名稱]{.hl}
2. 除去「無...」類別（如無相關資料）

處理高風險特徵
```{r}

# 特徵型別轉換
tbl_X_g1 <- tbl_ori %>% 
    select(contains("黑名單")) %>% 
    mutate(
        across(    # 套用至多個欄位
            .cols = everything(),    # tidy-select
            .fns = ~ factor(
                .x, 
                levels = c("0", "1"),    # dummy enc. 會將第一個level視為基準組
                labels = c("no", "yes")
            ), 
            .names = "{.col}_"    # 不改欄位名稱表示取代
        )
        , .keep = "none"    # 不保留原始資料
    ) %>% 
    rename(
         `黑名單產品(75%)` = `黑名單產品_`, 
         `黑名單號列(75%)` = `黑名單號列_`, 
         `黑名單號列(avg)` = `黑名單產品(舊)_`,
         `黑名單生產國(75%)` = `黑名單生產國_`,
         `黑名單進口商(75%)` = `黑名單進口商_`,
    )

# 檢視轉換結果
# tbl_X_g1 %>% summary()
```

處理含「無...」類別特徵
```{r}

# 尋找含「無...」類別特徵

#   已處理欄位名稱
cols_exc <- c(names(tbl_others), "批檢驗結果(除去標示因素)") 

#   取出含「無...」level特徵之名稱
pick_naCols <- tbl_ori %>% 
    
    # 排除已處理欄位
    select(!(all_of(cols_exc) | contains("黑名單"))) %>% 
    
    # 特徵轉factor取levels
    map(.x = ., .f = \(x) levels(as.factor(x))) %>% 
    
    # 檢測含「無...」level特徵
    map_lgl(., \(x) any(str_detect(x, "無"))) 

cols_na <- names(pick_naCols)[pick_naCols]

```

```{r}
#| echo: false
rm(cols_exc, pick_naCols)
```

```{r}

# 利用factor()重設levels，去除「無...」類別

# 含「無...」類別特徵之levels
ori_lev <- tbl_ori[cols_na] %>% 
    map(\(x) unique(x))

# 取出「無...」以外之levels
pick_lev <- ori_lev %>% 
    map(\(x) !str_detect(x, "無"))

new_lev <- map2(
    .x = ori_lev, .y = pick_lev, 
    .f = \(x, y) x[y]
)

# 特徵型別轉換
tbl_X_g2<- modify2(
    .x = tbl_ori[cols_na], .y = new_lev, 
    .f = \(x, y) factor(x, levels = y, labels = seq_along(y))
)

```

```{r}
#| echo: false
rm(cols_na, ori_lev, pick_lev, new_lev)
```

處理其餘特徵
```{r}

# 排除已處理欄位
cols_exc <- c(names(tbl_others), "批檢驗結果(除去標示因素)", names(tbl_X_g2))

tbl_ori_rest <- tbl_ori %>% 
    select(!(all_of(cols_exc) | contains("黑名單")))

# 特徵型別轉換，重設levels
ori_lev <- tbl_ori_rest %>% 
    map(\(x) {as.character(x) %>% unique() %>% sort()})

tbl_X_g3 <- modify2(
    tbl_ori_rest, ori_lev, 
    \(x, y) factor(x, levels = y, labels = seq_along(y))
)

```

```{r}
#| echo: false
rm(cols_exc, tbl_ori_rest, ori_lev)
```

### combine processed data

```{r}

tbl_wra <- bind_cols(
    tibble(
        `Date` = tbl_others$受理日期, 
        `Y` = y
    ), 
    tbl_X_g1, tbl_X_g2, tbl_X_g3
) %>% 
    drop_na()    # 暫不嘗試補值

```

```{r}
#| echo: false
rm(y, tbl_X_g1, tbl_X_g2, tbl_X_g3)
```



## Split Data

先[將特徵名稱轉成代號]{.hl}，預防後續建模因特殊欄位名稱造成錯誤
```{r}

# 建立欄位名稱對照表
tbl_name2sym <- tibble(
    `C Names` = names(tbl_wra[-c(1:2)]), 
    `C Symbols` = paste0("X_", seq_along(tbl_wra[-c(1:2)]))
)

# 特徵名稱轉成代號
names(tbl_wra)[-c(1:2)] <- tbl_name2sym$`C Symbols`

```

資料擷取期間調整評估使用資料如下：

1. [tbl_train]{.obj} ：擷取 2011-01-01 至 2018-12-31 資料（同BPI模型）
2. [tbl_train_130101]{.obj} ：擷取 2013-01-01 至 2018-12-31 資料（農藥檢驗項目調整至252項）
3. [tbl_train_140703]{.obj} ：擷取 2014-07-03 至 2018-12-31 資料（農藥檢驗項目調整至311項）

```{r}

tbl_wra_sub <- tbl_wra[c(T, T, !str_detect(tbl_name2sym$`C Names`, "黑名單"))]

tbl_train <- tbl_wra_sub %>% 
    filter(Date < as.Date("2019-01-01")) %>% 
    select(!Date)

tbl_train_130101 <- tbl_wra_sub %>% 
    filter(Date >= as.Date("2013-01-01") & Date < as.Date("2019-01-01")) %>% 
    select(!Date)

tbl_train_140703 <- tbl_wra_sub %>% 
    filter(Date >= as.Date("2014-07-03") & Date < as.Date("2019-01-01")) %>% 
    select(!Date)

tbl_test <- tbl_wra_sub %>% 
    filter(Date >= as.Date("2019-01-01")) %>% 
    select(!Date)

```



## Save 

```{r}

# 組成 list
lst_mdlData <- list(
    train = list(
        `all` = tbl_train, 
        `130101` = tbl_train_130101, 
        `140703` = tbl_train_140703
    ), 
    test = list(`test` = tbl_test), 
    others = list(
        `fName` = tbl_name2sym
    )
)


rm(tbl_wra_sub, tbl_train, tbl_train_130101, tbl_train_140703, tbl_test)
```

```{r}
# save(lst_mdlData, file = "data/vegetable_ds.rda")
```





