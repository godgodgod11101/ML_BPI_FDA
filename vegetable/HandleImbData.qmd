---
title: "BPI Model Improvement"
author: "Jacky Wang"
format:
    html:
        theme: cosmo
        toc: true
        toc-depth: 2
        toc-location: right
        toc-title: "On this page"
        css: "css/style.css"
---



## Code Structure

1. 資料清理（DataWrangling.qmd）
2. **資料不平衡處理（HandlingImbData.qmd）**



## Introduction

本程式檔執行內容如下：

1. Import：引入資料，資料已進行清理與切分。
2. Handling Imbalanced Datasets：資料不平衡處理。



## Package

```{r}
#| message: false
#| warning: false

# tidyverse
library(tibble)
library(dplyr)
library(purrr)    # FP toolkit，以map()、modify()取代for-loop

```



## Import

```{r}
load(file = "data/vegetable_ds.rda")
```

```{r}
#| echo: false
lst_mdlData %>% str(max.level = 2)
```
資料集說明如下：

* train（訓練集）：
    + all：擷取期間為[2011-01-01]{.date-blue}至[2018-12-31]{.date-blue}（基準組）
    + 130101：擷取期間為[2013-01-01]{.date-blue}至[2018-12-31]{.date-blue}
    + 140703：擷取期間為[2014-07-03]{.date-blue}至[2018-12-31]{.date-blue}
* test（測試集）：[2019-01-01]{.date-orange}以後的資料
* others（其他資訊）



## Handle Imbalanced Datasets

```{r}

# 目標（不合格報單）占整體比例

#   function
fail_ratio <- function(vec_y) {
    
    pf <- vec_y %>% summary()
    n_fail <- pf[[2]]
    n_pass <- pf[[1]]
    f_ratio <- n_fail / (n_fail+n_pass)
    
    f_ratio_ch <- round(f_ratio*100, digits = 2) %>% 
        as.character() %>% 
        paste0(., "%")
    rsl <- list(`fail_ratio`=f_ratio_ch, `n_fail`=n_fail, `n_pass`=n_pass)
    
    return(rsl)
}

#   print
bind_rows(
    fail_ratio(lst_mdlData[["train"]][["all"]]$Y), 
    fail_ratio(lst_mdlData[["train"]][["130101"]]$Y), 
    fail_ratio(lst_mdlData[["train"]][["140703"]]$Y)
)
# [[]] 與 $ （取元素）用法相同，不同於 [] （保留外層結構）

```

### handling

```{r}
#| message: false
#| warning: false

library(recipes)    # build feature engineering steps
library(themis)    # dealing with unbalanced data

```

```{r}

upsample_bake <- function(prep_train) {
    
    rec <- recipe(Y ~ ., data = lst_mdlData$train$all) %>% 
        # 定義資料結構的資料集（定義formula、儲存欄位型別）
        
        step_upsample(Y, over_ratio = 3/7) %>%
        # skip=TRUE (default): 若bake()中new_data非NULL，此步驟會跳過（表示只用於訓練集）
        
        prep(training = prep_train)
        # 配適的資料集（後續會根據此資料集的少數類別樣本做過採樣）
    
    rsl <- bake(rec, new_data = NULL) 
    # 處理的資料集（NULL表示直接作用於配適的資料集）
    
    return(rsl)
}

a_rs <- upsample_bake(lst_mdlData$train$all)
a130101_rs <- upsample_bake(lst_mdlData$train$`130101`)
a140703_rs <- upsample_bake(lst_mdlData$train$`140703`)

```

```{r}

# 檢查處理後占比
bind_rows(
    fail_ratio(a_rs$Y), 
    fail_ratio(a130101_rs$Y), 
    fail_ratio(a140703_rs$Y)
)

```








